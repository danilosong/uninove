<?php
/* == CABECALHO ============================================================== */
// Carrega o form em $form
$form = $this->form;

// Carrega o dataView em $dataView
$dataView = $this->dataView;

// Carrega o route em $route
$route = $dataView["route"];

// Carrega o controller em $controller
$controller = $dataView["controller"];

// Carrega a action em $action
$action = $dataView["action"];

// Carrega o partialObject em $partialObject
$partialObject = $this->partialObj('tcmed');

/* @var $fh \Application\View\Helper\FormHelp */
$fh = $this->formHelp(
        $this, $this->form, $this->url(
                $route, array(
            'controller' => $controller,
            'action' => $dataView['action'],
                ), [], FALSE, $dataView['ajax']
        )
);

// Carrega o partial do messenger
$partialObject->partial('index/partial-form-messenger', null, ['this' => &$this]);

// Carrega as mensagens do servidor
if ($this->resul and is_array($this->resul) and $this->resul[0] === FALSE) {
    foreach ($this->resul[1] as $key => $vlr) {
        echo '<h4 id="erro', $key, '" class="alert alert-danger">', $vlr, '</h4>';
    }
}

// Imprime o título da pagina
echo '<h2>' . $dataView["titulo"] . '</h2>';

$fh->formInit('Dados do Funcionario A ', ["noPreFormInit" => TRUE]); // ==============|

$fh->setPreFix('funcionario');
$fh->openCol(12);
$partialObject->partial('empresas/partial-form-all', $fh, ['this' => &$this, "hideCnpj" => TRUE]);
$fh->closeCol();

$idFuncionario = $fh->getIdFor('idFuncionario');
$fh->openCol(3)->number('referenciaFun')->closeCol();
$referenciaFun = $fh->getLastId();
$fh->openCol(5)->text('nomeFuncionario', ["extra" => ["icon" => "search", "class" => "list-all-autocomp", "title" => "buscar todos"]])->closeCol();
$nomeFuncionario = $fh->getLastId();
$fh->removePreFix('funcionario');

$fh->lineDown();

//Somente irá exibir quando a lista estiver visível
$fh->openCol(3, ["class" => "hideOn showWhenA"]);
$fh->buildButton(["id" => "refreshA", "class" => "btn-block"], 'Atualizar lista <i class="fa fa-refresh"></i>', "success", TRUE);
$fh->closeCol();

$fh->openCol(3, 6, ["class" => "hideOn showWhenA"]);
$fh->buildButton(["id" => "transfereA", "class" => "btn-block"], 'Transferir Selecionados <i class="fa fa-level-down"></i>', "success", TRUE);
$fh->closeCol();

$fh->closeLine();
echo '<br>';
$fh->openLine();

$fh->lineDown();

$fh->openCol(12, ["id" => "listaFuncionarioA", "data-tipo" => "origem"])->closeCol();

$fh->renderFieldsetFim(); // =========================================================|
$fh->renderFieldsetIni('Dados do Funcionario B'); // =================================|

$fh->setPreFix('otherFuncionario');
$fh->openCol(12);
$partialObject->partial('empresas/partial-form-all', $fh, ['this' => &$this, "hideCnpj" => TRUE, 'nameField' => 'fieldsOtherEmpresa']);
$fh->closeCol();

$idOtherFuncionario = $fh->getIdFor('idFuncionario');
$fh->openCol(3)->number('referenciaFun')->closeCol();
$otherReferenciaFun = $fh->getLastId();
$fh->openCol(5)->text('nomeFuncionario', ["extra" => ["icon" => "search", "class" => "list-all-autocomp", "title" => "buscar todos"]])->closeCol();
$otherNomeFuncionario = $fh->getLastId();
$fh->setPreFix('otherFuncionario');

$fh->lineDown();

//Somente irá exibir quando a lista estiver visível
$fh->openCol(3, ["class" => "hideOn showWhenB"]);
$fh->buildButton(["id" => "refreshB", "class" => "btn-block"], 'Atualizar lista <i class="fa fa-refresh"></i>', "success", TRUE);
$fh->closeCol();

$fh->openCol(3, 6, ["class" => "hideOn showWhenB"]);
$fh->buildButton(["id" => "transfereB", "class" => "btn-block"], 'Transferir Selecionados <i class="fa fa-level-up"></i>', "success", TRUE);
$fh->closeCol();

$fh->closeLine();
echo '<br>';
$fh->openLine();

$fh->openCol(12, ["id" => "listaFuncionarioB", "data-tipo" => "destino"])->closeCol();

$fh->formEnd(); // ====================================================================|

$fields = array(
    "idFuncionario" => $idFuncionario,
    "idOtherFuncionario" => $idOtherFuncionario,
    "nomeFuncionario" => $nomeFuncionario,
    "referenciaFun" => $referenciaFun,
    "otherNomeFuncionario" => $otherNomeFuncionario,
    "otherReferenciaFun" => $otherReferenciaFun,
    "empresa" => $partialObject->fieldsEmpresa,
    "otherEmpresa" => $partialObject->fieldsOtherEmpresa,
);
?>
<script type="text/javascript">
    $(function () {
        var fields = <?php echo json_encode($fields) ?>;
        var idFuncionario = $$(fields.idFuncionario).val();
        var idOtherFuncionario = $$(fields.idOtherFuncionario).val();

        var $listaFuncionarioA = $("#listaFuncionarioA");
        var $listaFuncionarioB = $("#listaFuncionarioB");

        /**
         * 
         * @param {int} id ID do funcionário
         * @param {jQuery Element} $ret Elemento de retorno do resultado
         * @returns {undefined}
         */
        function getListaConsultaById(id, ret) {
            $.processa({
                url: "<?php echo $this->url($route, array('controller' => $controller, 'action' => "getListaConsultas"), [], FALSE, FALSE); ?>/" + id,
                ret: '#' + ret,
                savePage: false
            });
        }


        if (idFuncionario.length > 0) {
            getListaConsultaById(idFuncionario, "listaFuncionarioA");
            $('.showWhenA').removeClass('hideOn').show();
        }

        if (idOtherFuncionario.length > 0) {
            getListaConsultaById(idOtherFuncionario, "listaFuncionarioB");
            $('.showWhenB').removeClass('hideOn').show();
        }

        /**
         * Autocomp Funcionario
         */
        $$(fields.nomeFuncionario).auto({
            primary: "nomeFuncionario",
            serviceUrl: "<?php echo $this->url('tcmed/default', array('controller' => 'Funcionarios', 'action' => 'autoComp'), [], FALSE, FALSE); ?>",
            filters: function (data) {
                data.rules = {
                    "empresa": $$(fields.empresa.idEmpresa).val()
                };
                return data;
            },
            params: {
                subOpcao: "type1"
            },
            callback: function (data) {
                $('form').processa({
                    url: "<?php echo $this->url($route, array('controller' => $controller, 'action' => "transfExame"), [], FALSE, FALSE); ?>",
                    type: "POST",
                    data: {
                        "subOpcao": "funcionario",
                        "idFunc": data.idFuncionario
                    },
                });
            },
            showCols: ["referenciaFun", "nomeFuncionario", "rg"]
        });

        /**
         * Autocomp OtherFuncionario
         */
        $$(fields.otherNomeFuncionario).auto({
            primary: "nomeFuncionario",
            serviceUrl: "<?php echo $this->url('tcmed/default', array('controller' => 'Funcionarios', 'action' => 'autoComp'), [], FALSE, FALSE); ?>",
            filters: function (data) {
                data.rules = {
                    "empresa": $$(fields.otherEmpresa.idEmpresa).val()
                };
                return data;
            },
            params: {
                subOpcao: "type1"
            },
            callback: function (data) {
                $('form').processa({
                    url: "<?php echo $this->url($route, array('controller' => $controller, 'action' => "transfExame"), [], FALSE, FALSE); ?>",
                    type: "POST",
                    data: {
                        "subOpcao": "otherFuncionario",
                        "idFunc": data.idFuncionario
                    },
                });
            },
            showCols: ["referenciaFun", "nomeFuncionario", "rg"]
        });

        /**
         * Atualiza a lista A
         */
        $("#refreshA").click(function () {
            getListaConsultaById(idFuncionario, "listaFuncionarioA");
        });

        /**
         * Atualiza a lista B
         */
        $("#refreshB").click(function () {
            getListaConsultaById(idOtherFuncionario, "listaFuncionarioB");
        });

        /**
         * Quando o retorno é verdadeiro, significa que existe pelo menos 1 input
         * checkbox selecionado na lista
         * 
         * @param {jQuery Element} $el Lista contendo os checkbox a ser verificados
         * @returns {boolean}         
         */
        function validaChecks($el) {
            if ($el.find('tbody').find("input:checkbox").is(':checked')) {
                return true;
            }

            $.notify({
                "message": "É preciso pelo menos 1 checkbox selecionado para continuar com a transferência",
                "type": "danger"
            });
        }

        /**
         * Valida os funcionários selecionados na tela.
         * Tipos de validação:
         * - Funcionários com o ID vazio => Não Permitido
         * - Funcionários com o mesmo ID => Não Permitido
         *
         * @returns {boolean}
         */
        function validaFuncionarios() {
            var resul = true;
            var message = "";

            if (0 == idFuncionario.length || 0 == idOtherFuncionario.length) {
                message = "É necessário possuir os dois funcionários para continuar!";
                resul = false;
            }

            if (idFuncionario == idOtherFuncionario) {
                message = "Não é possível fazer troca de consultas entre o mesmo Funcionário";
                resul = false;
            }

            if (!resul) {
                $.notify({"message": message, "type": "danger"});
            }

            return resul;
        }

        /**
         * Lê todos os checkbox marcados no $el e monta um JSON contendo
         * os seus values.
         * 
         * @param {jQuery Element} $el Nome do elemento contendo os checkbox
         * @returns {JSON} 
         */
        function getListaCheckbox($el) {
            var lista = [];

            $el.find('tbody').find("input:checkbox").each(function () {
                if ($(this).is(':checked')) {
                    lista.push($(this).val());
                }
            });
            return JSON.stringify(lista);
        }

        /**
         * 
         */
        $("#transfereA").click(function () {
            if (!validaFuncionarios() || !validaChecks($listaFuncionarioA)) {
                return;
            }

            if (!confirm("Deseja realmente trocar esta consulta?")) {
                return;
            }

            $.processa({
                url: "<?php echo $this->url($route, array('controller' => $controller, 'action' => "transferirConsultasSelecionados"), [], FALSE, FALSE); ?>",
                type: "POST",
                data: {
                    "idConsultas": getListaCheckbox($listaFuncionarioA),
                    "idFuncionario": idOtherFuncionario
                },
                savePage: false,
                callback: function () {
                    getListaConsultaById(idFuncionario, "listaFuncionarioA");
                    getListaConsultaById(idOtherFuncionario, "listaFuncionarioB");
                }
            });
        });

        /**
         * 
         */
        $("#transfereB").click(function () {
            if (!validaFuncionarios() || !validaChecks($listaFuncionarioB)) {
                return;
            }

            if (!confirm("Deseja realmente trocar esta consulta?")) {
                return;
            }

            $.processa({
                url: "<?php echo $this->url($route, array('controller' => $controller, 'action' => "transferirConsultasSelecionados"), [], FALSE, FALSE); ?>",
                type: "POST",
                data: {
                    "idConsultas": getListaCheckbox($listaFuncionarioB),
                    "idFuncionario": idFuncionario
                },
                savePage: false,
                callback: function () {
                    getListaConsultaById(idFuncionario, "listaFuncionarioA");
                    getListaConsultaById(idOtherFuncionario, "listaFuncionarioB");
                }
            });
        });
    });
</script>